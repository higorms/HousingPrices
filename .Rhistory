x <- matrix(1:6, 2, 3)
x
x <- c(1,2,NA,4,NA,5)
X
x
bad <- is.na(x)
bad
x[!bad]
x[[!bad]]
!TRUE
x <- matrix(1:4, 2, 2)
y <- matrix(rep(10, 4), 2, 2)
x %*% y
x <- 4
class(4)
x <- c(4, "a", TRUE)
class(x)
x <- 4
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x, y)
vector
vector(4)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x <- 1:4
y <- 2
x + y
hw1_data <- read.csv("C:/Users/gusta/Downloads/quiz1_data/hw1_data.csv")
View(hw1_data)
hw1_data
class(hw1_data)
head(hw1_data)
head(hw1_data, 5)
tail(hw1_data)
sum(is.na(hw1_data["Ozone"]))
mean(hw1_data["Ozone"])
hw1_data["Ozone"]
sum(hw1_data["Ozone"])
bad <- is.na(hw1_data["Ozone"])
mean(hw1_data["Ozone"][!bad])
hw1_data["Ozone" > 31]["Temp" > 90]
wherex = hw1_data["Ozone"] > 31
wherey = hw1_data["Temp"] > 90
subsetxy = hw1_data[wherex][wherey]
subsetxy
hw1_data[wherex]
hw1_data[Ozone > 31]
hw1_data["Ozone" > 31]
complete.cases(hw1_data)
hw1_data[hw1_data["Ozone"] > 31]
subset(hw1_data, Ozone > 31)
subset(hw1_data, Ozone > 31 & Temp > 90)
newdata = subset(hw1_data, Ozone > 31 & Temp > 90)
median(newdata["Solar.R"])
mean(newdata["Solar.R"])
newdata["Solar.R"]
newdata[["Solar.R"]]
mean(newdata[["Solar.R"]])
hw1_data[hw1_data[["Ozone"]] > 31]
hw1_data[["Ozone"]] > 31
hw1_data[hw1_data[["Ozone"]] > 31]
hw1_data[,hw1_data[["Ozone"]] > 31]
hw1_data[hw1_data[["Month"]] == 6]
hw1_data[TRUE,hw1_data[["Month"]] == 6]
hw1_data[hw1_data[["Month"]] == 6, "Temp"]
mean(hw1_data[hw1_data[["Month"]] == 6, "Temp"])
mean(hw1_data[hw1_data[["Month"]] == 6, TRUE])
mean(hw1_data[hw1_data[["Month"]] == 6, 1:6])
mean(hw1_data[hw1_data[["Month"]] == 6, C(1:6)])
mean(hw1_data[hw1_data[["Month"]] == 6, C(1,2,3,4,5,6)])
hw1_data
max(hw1_data[hw1_data[["Month"]] == 5, "Ozone")
max(hw1_data[hw1_data[["Month"]] == 5, "Ozone"])
gate = hw1_data[hw1_data[["Month"]] == 5 * is.na(hw1_data[["Ozone"]])
gate = hw1_data[hw1_data[["Month"]] == 5
gate = hw1_data[hw1_data[["Month"]] == 5]
gate = hw1_data[["Month"]] == 5
gate = gate * is.na(hw1_data[["Ozone"]])
max(hw1_data[gate, "Ozone"])
max(1,2,3,4,5,6)
max(1,2,3,4,5,6, NA)
max(1,2,3,4,5,6, NA, na=false)
class(4L)
1:4 + 2:3
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>10]
x[x>10] = 4
x
sum(is.na(hw1_data[]))
sum(is.na(hw1_data["Ozone"]))
subset(hw1_data, Ozone>31, Temp > 90)
subset(hw1_data, Ozone > 31, Temp > 90)
hw1_data
bad
hw1_data[!bad]
hw1_data[[!bad]
]
hw1_data[[!bad]]
view(hw1_data)
allrows = c(rep(TRUE, 6))
hw1_data[!bad, allrows]
mean(hw1_data["Ozone" > 31 & "Temp >90", "Solar.R"])
mean(hw1_data["Ozone" > 31 && "Temp >90", "Solar.R"])
mean(hw1_data["Ozone" > 31 * "Temp >90", "Solar.R"])
mean(hw1_data["Ozone" > 31, "Solar.R"]["Temp" > 90, "Solar.R"])
hw1_data["Ozone" > 31, "Solar.R"]["Temp" > 90, "Solar.R"]
hw1_data["Ozone" > 31, "Solar.R"]
hw1_data["Ozone" > 31, c("Solar.R", "Temp)"]
hw1_data["Ozone" > 31, c("Solar.R", "Temp")]
hw1_data["Ozone" > 31, c("Solar.R", "Temp")]["Temp">90, "Solar.R"]
hw1_data[hw1_data["Ozone"] > 31, c("Solar.R", "Temp")][hw1_data["Temp"]>90, "Solar.R"]
NA > 31
boolean(NA)
bool(NA)
NA == Ture
NA == True
NA == TRUE
NA == FALSE
TRUE * FALSE
0 == FALSE
newdata = hw1_data[!bad]
newdata = hw1_data[hw1_data["Ozone"]>31]
newdata = hw1_data[!bad]
newdata = newdata[newdata["Ozone"]>31]
newdata = newdata[!is.na(newdata["Temp"])
]
newdata = newdata[newdata["Temp"] > 90]
mean(newdata["Solar.R"])
newdata
newdata
newdata = hw1_data[!bad]
newdata = hw1_data[!bad, allrows]
newdata = hw1_data[hw1_data["Ozone"]>31, allrows]
newdata = hw1_data[!is.na(newdata["Temp"]), allrows]
newdata = hw1_data[newdata["Temp"] > 90, allrows]
newdata
mean(newdata["Solar.R"])
mean(newdata[["Solar.R"]])
newdata = hw1_data[!bad]
newdata = newdata[newdata["Ozone"]>31, allrows]
newdata = hw1_data[!bad, allrows]
newdata = newdata[newdata["Ozone"]>31, allrows]
View(newdata)
newdata = newdata[!is.na(newdata["Temp"]), allrows]
newdata = newdata[newdata["Temp"] > 90, allrows]
mean(newdata[["Solar.R"]])
mean(hw1_data[hw1_data[["Month"]] == 6, "Temp"])
max(hw1_data[hw1_data[["Month"]] == 5, "Ozone"])
max(hw1_data[hw1_data[["Month"]] == 5 * !is.na(hw1_data[["Ozone"]]), "Ozone"])
cls
clear()
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div = z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(dir)
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path(mytest3.R)
file.path("mytest3.R"")
quit
""
file.path("mytest3.R")
file.path("mytest3.R", "folder1", "folder2")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?":"
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, lenght=30)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:lenght(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect = c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
setcwd("C:\\Users\\gusta\\PycharmProjects")
setwd("C:\\Users\\gusta\\PycharmProjects")
setwd("C:\\Users\\gusta\\PycharmProjects\\HousingPrices")
dados_de_treino <-  read.csv("data\\train.csv")
dados_de_treino <- read.csv("data\\train.csv")
dados_de_teste <- read.csv("data\\test.csv")
modelo_com_todas_as_variaveis <- lm(SalePrice ~ ., data=dados_de_treino)
modelo_com_todas_as_variaveis <- lm(SalePrice ~ ., data=dados_de_treino)
dados_de_treino$SalePrice
modelo_com_todas_as_variaveis <- lm(SalePrice ~ ., data=dados_de_treino)
View(dados_de_treino)
mapply(function(variavel){length(unique(variavel))} , dados_de_treino)
mapply(function(variavel){length(unique(variavel))} , dados_de_treino) == 1
any(mapply(function(variavel){length(unique(variavel))} , dados_de_treino) == 1)
mapply(function(variavel){unique(variavel)} , dados_de_treino)
dados_de_treino$Street
unique(dados_de_treino$Street)
